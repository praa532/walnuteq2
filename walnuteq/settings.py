"""
Django settings for walnuteq project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from configparser import ConfigParser

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#initializing config parser
config_parser = ConfigParser(interpolation=None)
config_parser.read(Path(BASE_DIR).joinpath('setting.ini'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config_parser.get('SECRETKEY','KEY'),

# SECURITY WARNING: don't run with debug turned on in production!
if config_parser.getboolean('DEPLOY','PRODUCTION'):
    DEBUG = False
    ALLOWED_HOSTS = [] # allow only registered domain
else:
    DEBUG = True
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'company.apps.CompanyConfig',
    'employee.apps.EmployeeConfig',
    'entity_users.apps.EntityUsersConfig',
    'surveyqa.apps.SurveyqaConfig',
    'twilio_app.apps.TwilioAppConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'walnuteq.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'walnuteq.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config_parser.get('DATABASE','DBNAME'),
        'USER': config_parser.get('DATABASE','USER'),
        'PASSWORD': config_parser.get('DATABASE','PASSWORD'),
        'HOST': config_parser.get('DATABASE','LOCALHOST'),
        'PORT': config_parser.get('DATABASE','PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# import os
STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR,'templates/static')]
STATICFILES_DIRS = [Path(BASE_DIR).joinpath('templates','static'),]
# STATIC_ROOT = os.path.join(BASE_DIR,"static-prod")
STATIC_ROOT = Path(BASE_DIR).joinpath('static-prod')
MEDIA_URL = "/media/"
MEDIA_ROOT = Path(BASE_DIR).joinpath("media")
#Mail Configuration need to change in feature
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = config_parser.get('APP','EMAIL_BACKEND')
EAMIL_HOST=config_parser.get('APP','EAMIL_HOST')
EMAIL_USE_TLS=config_parser.getboolean('APP','EMAIL_USE_TLS')
EMAIL_PORT=config_parser.getint('APP','EMAIL_PORT')
#use your own mail_id
EMAIL_HOST_USER=config_parser.get('APP','EMAIL_HOST_USER')
#use your own mail app_password
EMAIL_HOST_PASSWORD=config_parser.get('APP','EMAIL_HOST_PASSWORD')
LOGIN_URL = config_parser.get('APP','LOGIN_URL'),
# LOGOUT_REDIRECT_URL = config_parser.get('APP','LOGOUT_REDIRECT_URL'),

#TWILIO SET UP

ACCOUNT_SID = config_parser.get('APP','ACCOUNT_SID')
AUTH_TOKEN = config_parser.get('APP','AUTH_TOKEN')
TWILIO_NUMBER = config_parser.get('APP','TWILIO_NUMBER')

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}